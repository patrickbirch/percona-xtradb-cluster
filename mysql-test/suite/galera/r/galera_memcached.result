# Initialize memcached tables
create database innodb_memcache;
use innodb_memcache;
CREATE  TABLE IF NOT EXISTS `cache_policies` (
`policy_name` VARCHAR(40) PRIMARY KEY,
`get_policy` ENUM('innodb_only', 'cache_only', 'caching','disabled')
NOT NULL ,
`set_policy` ENUM('innodb_only', 'cache_only','caching','disabled')
NOT NULL ,
`delete_policy` ENUM('innodb_only', 'cache_only', 'caching','disabled')
NOT NULL,
`flush_policy` ENUM('innodb_only', 'cache_only', 'caching','disabled')
NOT NULL
) ENGINE = innodb;
CREATE  TABLE IF NOT EXISTS `containers` (
`name` varchar(50) not null primary key,
`db_schema` VARCHAR(250) NOT NULL,
`db_table` VARCHAR(250) NOT NULL,
`key_columns` VARCHAR(250) NOT NULL,
`value_columns` VARCHAR(250),
`flags` VARCHAR(250) NOT NULL DEFAULT "0",
`cas_column` VARCHAR(250),
`expire_time_column` VARCHAR(250),
`unique_idx_name_on_key` VARCHAR(250) NOT NULL
) ENGINE = InnoDB;
CREATE  TABLE IF NOT EXISTS `config_options` (
`name` varchar(50) not null primary key,
`value` varchar(50)) ENGINE = InnoDB;
# Fill in the memcached metadata tables
use innodb_memcache;
INSERT INTO cache_policies VALUES("cache_policy", "innodb_only",
"innodb_only", "innodb_only", "innodb_only");
INSERT INTO config_options VALUES("separator", "|");
INSERT INTO containers VALUES ("desc_t1", "test", "t1",
"c1", "c2", "c3", "c4", "c5", "PRIMARY");
USE test;
DROP TABLE IF EXISTS t1;
CREATE TABLE t1 (c1 VARCHAR(32),
c2 VARCHAR(1024),
c3 INT, c4 BIGINT UNSIGNED, c5 INT, primary key(c1))
ENGINE = INNODB;
INSERT INTO t1 VALUES ('AA', 'Hello', 0, 0, 0);
INSERT INTO t1 VALUES ('bb', 'Goodbye', 0, 0, 0);
# Install and start the memcached plugin
INSTALL PLUGIN daemon_memcached SONAME 'libmemcached.so';
Warnings:
Warning	1681	'InnoDB Memcached Plugin' is deprecated and will be removed in a future release.
# Test that the calls fail when WSREP is enabled (text protocol)
(text protocol) stat() returned : success
(text protocol) get() returned : fail
(text protocol) set() returned : fail
# Test that the calls fail when WSREP is enabled (binary protocol)
(binary protocol) stat() returned : success
(binary protocol) get() returned : fail
(binary protocol) set() returned : fail
set global wsrep_provider="none";
# Test that the calls succeed when WSREP is disabled (text protocol)
(text protocol) stat() returned : success
(text protocol) get() returned : success
(text protocol) set() returned : success
# Test that the calls succeed when WSREP is disabled (binary protocol)
(binary protocol) stat() returned : success
(binary protocol) get() returned : success
(binary protocol) set() returned : success
