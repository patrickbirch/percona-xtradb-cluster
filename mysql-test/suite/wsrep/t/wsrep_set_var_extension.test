# === Purpose ===
#
# This test verifies that the following wsrep session variables are hint updatable.
#
# 1. wsrep_sync_wait
# 2. wsrep_dirty_reads
# 3. wsrep_trx_fragment_size
# 4. wsrep_trx_fragment_unit
#
# === References ===
#
# PXC-3743: Make wsrep session variables updatable through SET_VAR() hint

--source include/have_wsrep_provider.inc

# Auxiliary SP which returns variable value before hint, with hint and after hint applying
DELIMITER \\; 

CREATE PROCEDURE test_hint (hint_str VARCHAR(255), var_str VARCHAR(64))
BEGIN

SET @orig_q= CONCAT("SELECT VARIABLE_VALUE INTO @before_val FROM performance_schema.session_variables where VARIABLE_NAME = '",  var_str, "'");

SET @hint_q= CONCAT("SELECT /*+ ", hint_str,
                    "*/ VARIABLE_VALUE" ,
                    " INTO @hint_val FROM performance_schema.session_variables where VARIABLE_NAME = '",  var_str, "'");

SET @after_q= CONCAT("SELECT VARIABLE_VALUE INTO @after_val FROM performance_schema.session_variables where VARIABLE_NAME = '",  var_str, "'");

PREPARE orig_stmt FROM @orig_q;
PREPARE hint_stmt FROM @hint_q;
PREPARE after_stmt FROM @after_q;

EXECUTE orig_stmt;
EXECUTE hint_stmt;
EXECUTE after_stmt;

SELECT  hint_str;
SELECT @before_val, @hint_val, @after_val;

DEALLOCATE PREPARE orig_stmt;
DEALLOCATE PREPARE hint_stmt;
DEALLOCATE PREPARE after_stmt;

END\\

DELIMITER ;\\

--echo #########################################
--echo # Test SET_VAR hint for wsrep variables #
--echo #########################################

--echo
--echo # Test 1: wsrep_sync_wait
CALL test_hint("SET_VAR(wsrep_sync_wait=4)", "wsrep_sync_wait");
--assert (`SELECT @before_val != @hint_val`)
--assert (`SELECT @hint_val != @after_val`)
--assert (`SELECT @before_val = @after_val`)
--assert (`SELECT @hint_val = 4`)

SET wsrep_sync_wait=2;
CALL test_hint("SET_VAR(wsrep_sync_wait=4)", "wsrep_sync_wait");

--assert (`SELECT @before_val != @hint_val`)
--assert (`SELECT @hint_val != @after_val`)
--assert (`SELECT @before_val = @after_val`)
--assert (`SELECT @hint_val = 4`)

SET wsrep_sync_wait=default;

--echo
--echo # Test 2: wsrep_dirty_reads
CALL test_hint("SET_VAR(wsrep_dirty_reads=ON)", "wsrep_dirty_reads");
--assert (`SELECT @before_val != @hint_val`)
--assert (`SELECT @hint_val != @after_val`)
--assert (`SELECT @before_val = @after_val`)
--assert (`SELECT @hint_val = 'ON'`)

SET wsrep_dirty_reads=1;
CALL test_hint("SET_VAR(wsrep_dirty_reads=OFF)", "wsrep_dirty_reads");

--assert (`SELECT @before_val != @hint_val`)
--assert (`SELECT @hint_val != @after_val`)
--assert (`SELECT @before_val = @after_val`)
--assert (`SELECT @hint_val = 'OFF'`)

SET wsrep_dirty_reads=default;

--echo
--echo # Test 3: wsrep_trx_fragment_unit
CALL test_hint("SET_VAR(wsrep_trx_fragment_unit='statements')", "wsrep_trx_fragment_unit");

--assert (`SELECT @before_val != @hint_val`)
--assert (`SELECT @hint_val != @after_val`)
--assert (`SELECT @before_val = @after_val`)
--assert (`SELECT @hint_val = 'statements'`)

SET wsrep_trx_fragment_unit='statements';
CALL test_hint("SET_VAR(wsrep_trx_fragment_unit=rows)", "wsrep_trx_fragment_unit");

--assert (`SELECT @before_val != @hint_val`)
--assert (`SELECT @hint_val != @after_val`)
--assert (`SELECT @before_val = @after_val`)
--assert (`SELECT @hint_val = 'rows'`)

SET wsrep_trx_fragment_unit=default;

--echo
--echo # Test 4: wsrep_trx_fragment_size
CALL test_hint("SET_VAR(wsrep_trx_fragment_size=100)", "wsrep_trx_fragment_size");

--assert (`SELECT @before_val != @hint_val`)
--assert (`SELECT @hint_val != @after_val`)
--assert (`SELECT @before_val = @after_val`)
--assert (`SELECT @hint_val = 100`)

SET wsrep_trx_fragment_size=111;
CALL test_hint("SET_VAR(wsrep_trx_fragment_size=0)", "wsrep_trx_fragment_size");

--assert (`SELECT @before_val != @hint_val`)
--assert (`SELECT @hint_val != @after_val`)
--assert (`SELECT @before_val = @after_val`)
--assert (`SELECT @hint_val = 0`)

SET wsrep_trx_fragment_size=default;

--echo
--echo # Test 5: wsrep_on is not hint updatable.
CALL test_hint("SET_VAR(wsrep_on=0)", "wsrep_on");
--assert (`SELECT @before_val = @hint_val`)
--assert (`SELECT @hint_val = @after_val`)

DROP PROCEDURE test_hint;
